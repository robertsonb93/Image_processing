 /* Brandon Robertson 001173186 CPSC 4310 IMAGE PROCESSING
     First assignment
     Objective: Try to learn how to rotate a grayscale image
     Image format is PGM (Portable Grey Map)
  */


  #include <pam.h>
  #include <cstdio>
  #include <iostream>
  #include <cstdlib>
  #include <algorithm>
  #include <cmath>

     using namespace std;


     const int MAX_N = 4;
     tuple **read_image(char *filename, pam &inpam);
     void write_image(char *filename,pam &inpam, tuple **array);
     pam rotate_image(tuple **&array, pam &inpam, const double& angle);
     void rotation(double& Y,double& X, const double &angle);
     void compareForBounds(const double Y[],const double X[],double dimensions[]);
     void inputToOutput(const double dimension[],tuple **outputArray, tuple** array,pam &inpam, pam outpam, double angle);
     
     int LU_decomp(double A[MAX_N][MAX_N], int n, int pivot[], double &det);
     void LU_solve(double A[MAX_N][MAX_N], int n, int pivot[], double b[], double x[]);

 double PI = 3.14159265;

  //argc == argument count, auto sets value based on arguments given.
  //argv[] == argument vector
  //for passing in arguments from the command line.
  //argv[0] = image_rotate.cc
  //argv[1] = input.pgm
  //argv[2] = output.pgm
  //argv[3] = angle
    

     int main(int argc,char *argv[])
     {
     //the input image
       pam inpam;

     //the Array holding the information of the image 
       tuple **array;

       pm_init(argv[0],0);

       double angle = atof(argv[3]);
       
       array = read_image(argv[1],inpam);
       pam output = rotate_image(array, inpam, angle);

       write_image(argv[2], output, array);

       pnm_freepamarray(array,&inpam);

       return 0;
     };


/**************************************************************/
  //input: given a filename of the image, passed from argv in main.
  /**************************************************************/
     tuple **read_image(char *filename, pam &inpam)
     {
      FILE *f;
      tuple **A;

      if ((f = pm_openr(filename)) == NULL) {
        cerr << "Cannot open file \"" << filename << "\" for reading." << endl;
        exit(1);
      }

      if ((A = pnm_readpam(f, &inpam, PAM_STRUCT_SIZE(tuple_type))) == NULL) {
        cerr << "Cannot read image \"" << filename << "\"." << endl;
        exit(1);
      }

      pm_close(f);
      return A;
    };

/**************************************************************/
  // writes the image to the given file 
/**************************************************************/
    void write_image(char *filename,pam &inpam, tuple **array)
    {
      FILE *f;

      if ((f = pm_openw(filename)) == NULL) {
        cerr << "Cannot open file \"" << filename << "\" for writing." << endl;
        exit(1);
      }

     // NOTE: if you change other attributes such as height and width, you
     //  should change it here too. 
      inpam.file = f;

      
      pnm_writepam(&inpam, array);
      pm_close(f);
    };


/*************************************************************/
//rotate the image function
  // tuple array for the output
  // inpam for input pam file
  //angle in degrees to be rotated by counterclockwise
/*************************************************************/
    pam rotate_image(tuple **&array,pam &inpam, const double& angle)
    {
     double Y[3]={0}, X[3]={0};

     //array to hold the size for the rotated image
     //min height=0, max height=1, min width=2, max width=3
     double newDimensions[4];

     tuple **outputArray;
      X[0]=inpam.width-1;
      X[1]=inpam.width-1;
      Y[1]=inpam.height-1;
      Y[2]=inpam.height-1;  

  //find out the new height and width, rotate then compare 3 corners for the dimensions. 
    for(int i=0;i<3;i++)
    {
      rotation(Y[i],X[i],angle);
  }

    compareForBounds(Y,X,newDimensions);
    pam outpam = inpam;
    outpam.width=(newDimensions[3]-newDimensions[2]);
    outpam.height=(newDimensions[1]-newDimensions[0]);
    outputArray = pnm_allocpamarray(&outpam);
    inputToOutput(newDimensions,outputArray,array,inpam,outpam, angle);
   

    pnm_freepamarray(array,&inpam);     
    array = pnm_allocpamarray(&outpam);
    for (int i=0; i<outpam.height;i++)
    {
     for(int k=0;k<outpam.width;k++)
     {
      array[i][k][0] = outputArray[i][k][0];
      
    }
   
  }
    return outpam;
}





/*************************************************************/
//Clockwise, new coordinates for input image corners in the output array
//angle to be given via argv[2]
/*************************************************************/
void rotation(double& Y,double& X, const double &angle)
{
  double radAngle = -angle * (PI/180);
  int x = X;

  X = X *cos(radAngle) - Y *sin(radAngle);
  Y = x *sin(radAngle) + Y *cos(radAngle);
}


/*************************************************************/
//Clockwise order
//Y = first, second, third corners Y-value 
 //X = first, second, third corners X-value
//Dimensions are as follows
 //minimum height=0, max height=1
 //min width=2, max width=3
 //compares for where the boundries of the output array will be
 /*************************************************************/
 void compareForBounds(const double Y[],const double X[],double dimensions[])
{ 
  //compare the greatest of the 3 for the boundries
  if(Y[0]>Y[1]) dimensions[1] = Y[0];
  else dimensions[1] = Y[1];
  if(dimensions[1] <Y[2]) dimensions[1] = Y[2];
  if(dimensions[1] < 0) dimensions[1] = 0;

  if(X[0]>X[1]) dimensions[3] = X[0];
  else dimensions[3] = X[1];
  if(dimensions[3] < X[2]) dimensions[3] = X[2];
  if(dimensions[3] < 0) dimensions[3] = 0;


  //Compare for the minimum of the 3 boundries
    if(Y[0]>Y[1]) dimensions[0] = Y[1];
    else dimensions[0] = Y[0];
    if(dimensions[0]>Y[2]) dimensions[0] = Y[2];
    if(dimensions[0]>0) dimensions[0] = 0;

    if(X[0]>X[1]) dimensions[2] = X[1];
    else dimensions[2] = X[0];
    if(dimensions[2] > X[2]) dimensions[2] = X[2];
    if(dimensions[2] > 0) dimensions[2] = 0;
  }

/*************************************************************/
  //dimension relates as follows
 //minimum height=0, max height=1
 //min width=2, max width=3
 //takes the input array for the image and transfers the 
  //relative data from the input to the output.
 /*************************************************************/
void inputToOutput(const double dimension[],tuple **outputArray, tuple** array,pam &inpam, pam outpam, double angle)
 {
  
      for (int i=0; i<outpam.height;i++)
       {
         for(int k=0;k<outpam.width;k++)
         {
          double row=i+dimension[0];
          double col=k+dimension[2];
          rotation(row,col,(-angle));
          
          //how to get the points to put into matrix.
          double Q[4] = {0}; //holds intensity values from 4 corners, clockwise starting from Q11 
          int shift[8] = {0, 0, 1, 1, 0, 1, 0, 1};

          int r = floor(row);
          int c = floor(col);
          
          if(col == c)
            c-=1 ;
          if(row == r)
	     r-=1;

	  /*
          if(col <= 0)
            c-=1;
          if(row <= 0)
	     r-=1;
	  */
          
          //this is synonymous with the A for linsolve
          double systemArray[4][4] = 
          {
           {c,  r,  (r)  *(c),  1},
           {c+1,r,  (r)  *(c+1),1},
           {c,  r+1,(r+1)*(c),  1},
           {c+1,r+1,(r+1)*(c+1),1}
          };
             
          //put the intensities into 4 corners of Q. 
            for(int j = 0;j<4;j++)
            {
             
              if(r+shift[j] < inpam.height && r+shift[j] >= 0)
              {
              if(c+shift[j+4] < inpam.width && c+shift[j+4] >= 0)             
                Q[j] = array[r+shift[j]][c+shift[j+4]][0]; //synonymous with b from linsolve
             }
            }

              int n=4, pivot[4];
              double det, sol[4]; 

            if (LU_decomp(systemArray, n, pivot, det)) 
            {
              LU_solve(systemArray, n, pivot, Q, sol);
              double result = floor(sol[0]*col + sol[1]*row + sol[2]*col*row + sol[3] + 0.5);
	      if (result > 255) result = 255;
	      if (result < 0) result = 0;
	      outputArray[i][k][0] = result;
            }
          else
            outputArray[i][k][0] = 0;
        }
      }

    }
/************************************************************/
    //LINEAR SOLVE WIH CREDITS TOWARDS H.CHENG's linsolve.cc
    /********************************************************/
    /*
 * Solution of systems of linear equations
 *
 * Author: Howard Cheng
 * Reference:
 *   K.E. Atkinson. "An Introduction to Numerical Analysis."  2nd Ed., John 
 *   Wiley & Sons, 1988, pages 520-521.  ISBN 0-471-62489-6
 *
 * To solve the system Ax = b where A is an n x n matrix, first call
 * LU_decomp on A to obtain its LU decomposition.  Once the LU
 * decomposition is obtained, it can be used to solve linear systems with
 * the same coefficient matrix A but different vectors of b using the
 * LU_solve routine.  This routine is numerically stable (provided that
 * the original coefficient matrix has a small condition number).
 *
 * The inputs to LU_decomp are the matrix A, the dimension n, an
 * output array pivot of n-1 elements such that pivot[i] = j means
 * that rows i and j were swapped during the i-th step, and an output
 * parameter to return the determinant of the matrix.  The function
 * returns 1 if successful, and 0 if the matrix is singular.  The
 * matrix A is overwritten by its LU decomposition on return.  If the
 * matrix is singular, the content of A should not be used (it represents
 * intermediate results during the decomposition).
 *
 * The inputs to LU_solve are the LU decomposition of A, the dimension
 * n, the pivot array from LU_decomp, and n-dimensional vectors b and
 * x.  This function should be called only if the original matrix A
 * has a small condition number.  You can check this by checking that
 * the determinant returned by LU_decomp is not too close to 0.  This is
 * only a crude check: you should really be computing the condition number
 * of the matrix.
 * 
 */

//const int MAX_N = 10;

int LU_decomp(double A[MAX_N][MAX_N], int n, int pivot[], double &det)
{
  double s[MAX_N];           /* factors used in implicit scaling */
  double c, t;
  int i, j, k;

  det = 1.0;

  /* compute s[i] */
  for (i = 0; i < n; i++) {
    s[i] = 0.0;
    for (j = 0; j < n; j++) {
      if ((t = fabs(A[i][j])) > s[i]) {
  s[i] = t;
      }
    }
    if (s[i] == 0.0) {
      /* a row of zeroes: singular */
      det = 0.0;
      return 0;
    }
  }
  
  /* do the row reductions */
  for (k = 0; k < n-1; k++) {
    c = fabs(A[k][k]/s[k]);
    pivot[k] = k;
    for (i = k+1; i < n; i++) {
      t = fabs(A[i][k]/s[i]);
      if (t > c) {
  c = t;
  pivot[k] = i;
      }
    }

    if (c == 0) {
      /* pivot == 0: singular */
      det = 0.0;
      return 0;
    }

    /* do row exchange */
    if (k != pivot[k]) {
      det *= -1.0;
      for (j = k; j < n; j++) {
  t = A[k][j];
  A[k][j] = A[pivot[k]][j];
  A[pivot[k]][j] = t;
  t = s[k];
  s[k] = s[pivot[k]];
  s[pivot[k]] = t;
      }
    }

    /* do the row reduction */
    for (i = k+1; i < n; i++) {
      A[i][k] /= A[k][k];
      for (j = k+1; j < n; j++) {
  A[i][j] -= A[i][k] * A[k][j];
      }
    }

    det *= A[k][k];
  }
  
  /* note that the algorithm as state in the book is incorrect.  The */
  /* following is need to ensure that the last row is not all 0's.   */
  /* (maybe the book is correct, depending on what you think it's    */
  /* supposed to do.)                                                */
  if (A[n-1][n-1] == 0.0) {
    det = 0.0;
    return 0;
  } else {
    det *= A[n-1][n-1];
    return 1;
  }
}

void LU_solve(double A[MAX_N][MAX_N], int n, int pivot[], double b[], double x[])
{
  double t;
  int i, j, k;

  for (i = 0; i < n; i++) {
    x[i] = b[i];
  }
  for (k = 0; k < n-1; k++) {
    /* swap if necessary */
    if (k != pivot[k]) {
      t = x[k];
      x[k] = x[pivot[k]];
      x[pivot[k]] = t;
    }
    
    for (i = k+1; i < n; i++) {
      x[i] -= A[i][k] * x[k];
    }
  }

  x[n-1] /= A[n-1][n-1];
  
  for (i = n-2; i >= 0; i--) {
    for (j = i+1; j< n; j++) {
      x[i] -= A[i][j] * x[j];
    }
    x[i] /= A[i][i];
  }
}
/*
int main(void)
{
  double A[MAX_N][MAX_N], x[MAX_N], b[MAX_N];
  int pivot[MAX_N];             // only n-1 is needed, but what the heck 
  int n, i, j;
  double det;

  while (cin >> n && 0 < n && n <= MAX_N) {
    cout << "Enter A:" << endl;
    for (i = 0; i < n; i++) {
      for (j = 0; j < n; j++) {
  cin >> A[i][j];
      }
    }
    cout << "Enter b:";
    for (i = 0; i < n; i++) {
      cin >> b[i];
    }
    if (LU_decomp(A, n, pivot, det)) {
      LU_solve(A, n, pivot, b, x);
      cout << "LU decomposition of A:" << endl;
      for (i = 0; i < n; i++) {
  for (j = 0; j < n; j++) {
    cout << A[i][j] << " ";
  }
  cout << endl;
      }
      cout << "det = " << det << endl;
      cout << "x = ";
      for (i = 0; i < n; i++) {
  cout << x[i] << " ";
      }
      cout << endl;
    } else {
      cout << "A is singular" << endl;
    }
  }
  return 0;
}
*/
