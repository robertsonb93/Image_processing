/* Brandon Robertson 001173186 CPSC 4310 IMAGE PROCESSING
   second assignment PT2/2 assignment
   Objective: Try to learn how to Apply an unsharp mask to an image
   Image format is PGM (Portable Grey Map)
*/


#include <pam.h>
#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <cmath>

using namespace std;

tuple **read_image(char *filename, pam &inpam);
void write_image(char *filename,pam &inpam, tuple **array);
const pam unsharpMask(const pam& inpam,tuple **&inArray);

//argc == argument count, auto sets value based on arguments given.
//argv[] == argument vector
//for passing in arguments from the command line.
//argv[0] = image_rotate.cc
//argv[1] = input.pgm
//argv[2] = output.pgm
//argv[3] = angle
int main(int argc,char *argv[])
{
   //the input image
   pam inpam;

   //the Array holding the information of the image 
   tuple **array;

   pm_init(argv[0],0);
   array = read_image(argv[1],inpam);
   pam outpam = unsharpMask(inpam, array);	
   write_image(argv[2],outpam,array);

   return 0;
};


/**************************************************************/
//input: given a filename of the image, passed from argv in main.
/**************************************************************/
tuple **read_image(char *filename, pam &inpam)
{
   FILE *f;
   tuple **A;

   if ((f = pm_openr(filename)) == NULL) {
      cerr << "Cannot open file \"" << filename << "\" for reading." << endl;
      exit(1);
   }

   if ((A = pnm_readpam(f, &inpam, PAM_STRUCT_SIZE(tuple_type))) == NULL) {
      cerr << "Cannot read image \"" << filename << "\"." << endl;
      exit(1);
   }

   pm_close(f);
   return A;
};

/**************************************************************/
// writes the image to the given file 
/**************************************************************/
void write_image(char *filename,pam &inpam, tuple **array)
{
   FILE *f;

   if ((f = pm_openw(filename)) == NULL) {
      cerr << "Cannot open file \"" << filename << "\" for writing." << endl;
      exit(1);
   }

   // NOTE: if you change other attributes such as height and width, you
   //  should change it here too. 
   inpam.file = f;

			
   pnm_writepam(&inpam, array);
   pm_close(f);
};

/*************************************************************/
//Apply unsharp mask, multiply image by 2 and use avg mask 
//Out of bounds will use extended edges
//excessive values will be forced to 255 or 0
//will overwrite original array with the output at end
/*************************************************************/
const pam unsharpMask(const pam& inpam,tuple **&inArray)
{

   pam outpam = inpam;
   tuple** outArray = pnm_allocpamarray(&outpam);

//The unsharp mask created, with a 2 - 1/9 in mid & avg blur around
   const double AVG=-0.111111111, center=1.88888889;

//create constant reference points surrounding pixels XY
//want the 8 edges to pull from Vertical X first nine, Horizontal Y is last 9. 
   int surPixXY[18] = {-1,-1,-1,0,0,0,1,1,1,-1,0,1,-1,0,1,-1,0,1};

   int col, row;
   for(int r = 0;r<inpam.height;r++)//loop through Rows of inArray
   {
      for(int c = 0;c<inpam.width;c++)//loop through columns of inArray
      {	
	     double value=0;//becomes the pixel value in the output
	      for(int i = 0;i<9;i++) //loop through the mask 
	     {
   	    row = r+surPixXY[i];
   	    col = c+surPixXY[i+9];

   	    //keep col in bounds
   	    if(col < 0)
   	       col = 0;
   	    else if(col >= inpam.width)
   	       col = inpam.width-1;
   			
   	    //keep row in bounds
   	    if(row < 0)
   	       row = 0;
   	    else if (row >= inpam.height)
   	       row = inpam.height-1;
   	
   	    if(i==4)// check if on the center pixel of matrix
   	       value += (inArray[row][col][0]*center);
   	    else
   	       value += (inArray[row][col][0]*AVG);
   	 }

   	 if(value > 255)
   	    value = 255;
   	 else if (value < 0)
   	    value = 0;

   	 outArray[r][c][0] = value; 
      }
   }

//ease of use, overwrite the original array to be handed back.
   pnm_freepamarray(inArray,&inpam);     
   inArray = pnm_allocpamarray(&outpam);
   for(int r=0;r<inpam.height;r++)
      for(int c=0;c<inpam.width;c++)
	 inArray[r][c][0] = outArray[r][c][0];

   return outpam;
}
