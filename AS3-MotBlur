//Program will apply a motion blur filter to an image
//Images will be 8 bit greyscale
//Arguments will be input.pgm, output.pgm, a,b,T
//Where a,b,T are floats defining the motions used in the motion blur.

//-Read image
//-Pad Image with 0's, look for atleast 2x image size and preffered power of 2
//-Compute a Direct Fourier Transform of padded image and translate the origin to center of p-image
//-Perform a motion blur filter
//-Compute a Inverse Direct Fourier Transform of Padded Image
//-Remove Padding from Image
//(Optional, see what happens when not padded approp.)
//Note that sin(0) / 0 = 1
//

#include <pam.h>
#include <sstream>
#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <complex>
#include "fft.h"

using namespace std;

const double PI = 3.1415926359;
const double Eulers = 2.71828182845904523536;

tuple **read_image(char *filename, pam &inpam);
void write_image(char *filename,pam &inpam, tuple **array);
pam applyMotBlur(const pam& inpam, tuple **&inArray,const char* a, const char* b, const char* T);
pam padImage(const pam& inpam,tuple **&array);
void translateCntr(const pam& outpam,const pam& inpam,complex<double> **&array);
complex<double>** computeFFT(pam& outpam,tuple **&outArray);
void motionBlur(const pam& outpam,complex<double> **&compxMatrix, const char* a,const char* b,const char* T);
void computeIFFT(const pam& outpam,complex<double> **&compxMatrix);
void removePad(const pam& inpam,pam& outpam,tuple **&inArray);
bool convertToInts(const char* a,const char* b, const char* T,double& alpha,double& beta,double& tango);


//argc == argument count, auto sets value based on arguments given.
//argv[] == argument vector
//for passing in arguments from the command line.
//argv[0] = motBlur.cc
//argv[1] = input.pgm
//argv[2] = output.pgm
//argv[3] = a
//argv[4] = b
//argv[5] = T
int main(int argc,char *argv[])
{
   //the input image
   pam inpam;

   //the Array holding the information of the image 
   tuple **array;

   pm_init(argv[0],0);
   
   array = read_image(argv[1],inpam);
  
   pam outpam = applyMotBlur(inpam, array,argv[3],argv[4],argv[5]);	
  
   write_image(argv[2],outpam,array);

   pnm_freepamarray(array,&inpam);

   return 0;
};


/**************************************************************/
//input: given a filename of the image, passed from argv in main.
/**************************************************************/
tuple **read_image(char *filename, pam &inpam)
{
   FILE *f;
   tuple **A;

   if ((f = pm_openr(filename)) == NULL) {
      cerr << "Cannot open file \"" << filename << "\" for reading." << endl;
      exit(1);
   }

   if ((A = pnm_readpam(f, &inpam, PAM_STRUCT_SIZE(tuple_type))) == NULL) {
      cerr << "Cannot read image \"" << filename << "\"." << endl;
      exit(1);
   }

   pm_close(f);
   return A;
};

/**************************************************************/
// writes the image to the given file 
/**************************************************************/
void write_image(char *filename,pam &inpam, tuple **array)
{
   FILE *f;

   if ((f = pm_openw(filename)) == NULL) {
      cerr << "Cannot open file \"" << filename << "\" for writing." << endl;
      exit(1);
   }

   // NOTE: if you change other attributes such as height and width, you
   //  should change it here too. 
   inpam.file = f;
 
		
   pnm_writepam(&inpam, array);
   pm_close(f);
};

/*************************************************************/
//Will be the function responsible for calling the seperate functions
//in applying a motion Blur for the output image
// Will return a pam that is the output pam
//
//-Pad Image with 0's, look for atleast 2x image size and preffered power of 2
//-Compute a Direct Fourier Transform of padded image and translate the origin to center of p-image
//-Perform a motion blur filter
//-Compute a Inverse Direct Fourier Transform of Padded Image
//-Remove Padding from Image
/*************************************************************/
pam applyMotBlur(const pam& inpam, tuple **&inArray, const char* a, const char* b, const char* T)
{
   pam outpam = padImage(inpam,inArray);
   complex<double> **compxMatrix = computeFFT(outpam,inArray);


 /*  
   for(int i=0;i<outpam.height;i++)
      for(int j=0;j<outpam.width;j++)
	 inArray[i][j][0]=   floor(2*log(abs(compxMatrix[i][j])) + 0.5);
  */


    motionBlur(outpam,compxMatrix,a,b,T);
   computeIFFT(outpam,compxMatrix);

   for(int i=0;i<outpam.height;i++)
      for(int j=0;j<outpam.width;j++){
	 // cout<<"compxMatrix at i,j: "<<i<<","<<j<<":"<<compxMatrix[i][j]<<endl;
    // cout<<"floor(abscompxMatrix +0.5 at i,j: "<<i<<","<<j<<":"<<(pow(10,pow(10,abs(compxMatrix[i][j]) + 0.5)))<<endl;
   inArray[i][j][0]=floor(abs(compxMatrix[i][j]) + 0.5);
  }

   removePad(inpam,outpam,inArray);
   return outpam;
}
/*************************************************************/
//Function will return a pam based off a paddded inPam
/*************************************************************/
pam padImage(const pam& inpam,tuple **&array)
{
  int pwr2[31]={1,2,4,8,16,32,64,128,256,512,
                     1024,2048,4096,8192,16384,32768,
                     65536,131072,262144,524288,1048576,
                     2097152,4194304,8388608,
                     16777216,33554432,67108864,134217728,
                     268435456,536870912,
                     1073741824};
   
   int width = 2*inpam.width;
   int height = 2*inpam.height;

   for(int i=0;i<31;i++)
   {
      if(width <= pwr2[i])
      {
         width = pwr2[i];
         break;
      }
   }

   for(int i=0;i<32;i++)
   {
      if(height <= pwr2[i])
      {
         height = pwr2[i];
         break;
      }
   }


   pam outpam = inpam;
   outpam.width = width;
   outpam.height = height;
   tuple **outArray = pnm_allocpamarray(&outpam);

   for(int i=0;i<outpam.height;i++)
   {
      for(int j=0;j<outpam.width;j++)
      {
         if(i<inpam.height && j < inpam.width)
         outArray[i][j][0] = array[i][j][0];
        
         else
         outArray[i][j][0] = 0;
      }
   }

   pnm_freepamarray(array,&inpam);
   array = outArray;
  
   return outpam;
}
//***************************************************************/
//function will call the FFT function provided
//and create a matrix of complex numbers
/****************************************************************/
complex<double>** computeFFT(pam& outpam,tuple **&outArray)
{
   complex<double> **compxMatrix = new complex<double>*[outpam.height];

   //Make array of complex numbers Sized to M(width/height)
   complex<double> *buffer = new complex<double>[outpam.width];
   for(int i=0;i<outpam.height;i++)
   {
      compxMatrix[i] = new complex<double>[outpam.width];
      for(int j=0;j<outpam.width;j++)
      { 
               complex<double> temp (outArray[i][j][0],0);
      	 if ((i+j) % 2 == 0) {
      	    compxMatrix[i][j]= temp;
      	 } else {
      	    compxMatrix[i][j] = -temp;
      	 }
       }  
      FFT(compxMatrix[i],outpam.width,buffer);
   }
   delete[] buffer;


  //Build Array To give for Columns
  //insert those values into compxmatrix
   complex<double> *tempCompX = new complex<double>[outpam.height];
   buffer = new complex<double>[outpam.height];
  for(int i=0;i<outpam.width;i++)
  {
       for(int j=0;j<outpam.height;j++)
      { 
         complex<double> temp (compxMatrix[j][i]);
         tempCompX[j] = temp;
       }  
     
     FFT(tempCompX,outpam.height,buffer);

      for(int j=0;j<outpam.height;j++)
      {
        compxMatrix[j][i] = tempCompX[j];
      }
  }
  delete[] tempCompX;
  delete[] buffer;

  return compxMatrix;
}

/*************************************************************/
//Will First take the arguments for the blurring properties
// and ensure that the values given are numeric
//Will apply the motionBlur filter to the complex matrix provided
//Formula is H(u,v) = T/(PI(ua+vb)) * sin(PI(ua+vb)) * e ^-jPI(ua+vb)
//This can be H(u,v) = T * sin(PI(ua+vb))/PI(ua+vb) * e^-jPI(ua+vb)
//argv[3] = a
//argv[4] = b
//argv[5] = T
//PI = 3.1415926359
//e^-j(A) = cos(a) - j*sin(a);
//sin(0)/0 = 1; ie. when ua+vb =0
//*************************************************************
void motionBlur(const pam& outpam,complex<double> **&compxMatrix, const char* a,const char* b,const char* T)
{
  double alpha,beta,tango;
  if(!(convertToInts(a,b,T,alpha,beta,tango)))//This was cahnged to convert -> doubles
    return;

for(int i=0;i<outpam.height;i++)
  for(int j=0;j<outpam.width;j++)
   {
      int u = i - outpam.height/2;
      int v = j - outpam.width/2;
      double shift = PI*((u*alpha)+(v*beta));
      complex<double> compxNum (cos(shift),-sin(shift));
      
      if(shift != 0)
      compxMatrix[i][j] *= tango * (sin(shift)/shift) * compxNum;
      else 
      compxMatrix[i][j] *= tango * compxNum;
  }
}
/*************************************************************/
//Will apply the inverse FFT on the compxMatrix
//Will also apply the shift back
//************************************************************/
void computeIFFT(const pam& outpam,complex<double> **&compxMatrix)
{
  //Perform the operations on each row for IFFT
    complex<double> *buffer = new complex<double>[outpam.width];
   for(int i=0;i<outpam.height;i++)
   {
      inverseFFT(compxMatrix[i],outpam.width,buffer);
   }
   delete[] buffer;



   //Build Array To give for Columns
  //insert those values into compxmatrix
   complex<double> *tempCompX = new complex<double>[outpam.height];
   buffer = new complex<double>[outpam.height];
  for(int i=0;i<outpam.width;i++)
  {
       for(int j=0;j<outpam.height;j++)
      { 
         complex<double> temp (compxMatrix[j][i]);
         tempCompX[j] = temp;
      }  
     
       inverseFFT(tempCompX,outpam.height,buffer);

      for(int j=0;j<outpam.height;j++)
      {
      	 if ((i+j) % 2 == 0) 
         {
      	    compxMatrix[j][i] = tempCompX[j];
      	 } 
         else 
         {
      	    compxMatrix[j][i] = -tempCompX[j];
      	 }
      }
  }
  
  delete[] tempCompX;
  delete[] buffer;
}

/**********************************************************/
//Will remove the padding from the image and return it
//to the inpam.size()
/**********************************************************/
void removePad(const pam& inpam,pam& outpam,tuple **&inArray)
{
  tuple** temp = pnm_allocpamarray(&inpam);
  for(int i =0;i<inpam.height;i++)
  {
    for(int j=0;j<inpam.width;j++)
    {
      temp[i][j][0] = inArray[i][j][0];
    }
  }

   outpam.width = inpam.width;
   outpam.height = inpam.height;
  inArray = temp;
  //pnm_freepamarray(temp ,&inpam);
}

//*******************************************************
//Will convert the char* arguments into their respective double
//*******************************************************
bool convertToInts(const char* a,const char* b, const char* T,double& alpha,double& beta,double& tango)
{
  bool isGood=true;

  stringstream ss;
  ss << a << ' '<< b << ' ' << T;
    if(!(ss >> alpha))
    {
      cout<<"User input for 'a' Error"<<endl;
      cout<<"Value given is = "<<ss<<" And results in 'a' being: "<<alpha<<endl;
      isGood=false;
    }

  //stringstream ss(b);
    if(!(ss >> beta))
    {
      cout<<"User input for 'b' Error"<<endl;
      cout<<"Value given is = "<<ss<<" And results in 'b' being: "<<beta<<endl;
      isGood=false;
    }

  //stringstream ss(T);  
    if(!(ss >> tango))
    {
      cout<<"User input for 'T' Error"<<endl;
      cout<<"Value given is = "<<ss<<" And results in 'T' being: "<<tango<<endl;
      isGood=false;
    }
    return isGood;

}
