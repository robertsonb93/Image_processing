/* Brandon Robertson 1173193 CPSC 4310 IMAGE PROCESSING
   second assignment PT1/2 assignment
   Objective: Try to learn how to Apply a histogram equalization to an image
   Image format is PGM (Portable Grey Map)
*/


#include <pam.h>
#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <cmath>

using namespace std;

tuple **read_image(char *filename, pam &inpam);
void write_image(char *filename,pam &inpam, tuple **array);
const pam histogramEqual(const pam& inpam,tuple **&inArray);
const int* gatherHistogram(const pam& inpam,tuple **&inArray,const int &L);

//argc == argument count, auto sets value based on arguments given.
//argv[] == argument vector
//for passing in arguments from the command line.
//argv[0] = image_rotate.cc
//argv[1] = input.pgm
//argv[2] = output.pgm
//argv[3] = angle
int main(int argc,char *argv[])
{
   //the input image
   pam inpam;

   //the Array holding the information of the image 
   tuple **array;

   pm_init(argv[0],0);
   array = read_image(argv[1],inpam);
   pam outpam = histogramEqual(inpam, array);	
   write_image(argv[2],outpam,array);

   return 0;
};


/**************************************************************/
//input: given a filename of the image, passed from argv in main.
/**************************************************************/
tuple **read_image(char *filename, pam &inpam)
{
   FILE *f;
   tuple **A;

   if ((f = pm_openr(filename)) == NULL) {
      cerr << "Cannot open file \"" << filename << "\" for reading." << endl;
      exit(1);
   }

   if ((A = pnm_readpam(f, &inpam, PAM_STRUCT_SIZE(tuple_type))) == NULL) {
      cerr << "Cannot read image \"" << filename << "\"." << endl;
      exit(1);
   }

   pm_close(f);
   return A;
};

/**************************************************************/
// writes the image to the given file 
/**************************************************************/
void write_image(char *filename,pam &inpam, tuple **array)
{
   FILE *f;

   if ((f = pm_openw(filename)) == NULL) {
      cerr << "Cannot open file \"" << filename << "\" for writing." << endl;
      exit(1);
   }

   // NOTE: if you change other attributes such as height and width, you
   //  should change it here too. 
   inpam.file = f;

			
   pnm_writepam(&inpam, array);
   pm_close(f);
};

/*************************************************************/
//Equalize the histogram of the the image
//Method is formula: S(k) = summation j=0 -> k; n(j)/n * L
//S(k) is the output at the k-th intensity
//n is the number of pixels
//n(j) is the number of pixels at j-th intensity, will be held by histogram[j]
//L is the intensity range - 1, in this case L=255
/*************************************************************/
const pam histogramEqual(const pam& inpam,tuple **&inArray)
{
   const int L = 255; 
   const int* histogram = gatherHistogram(inpam,inArray,L);
   pam outpam = inpam;
   tuple** outArray = pnm_allocpamarray(&outpam);
   const double n = (inpam.width * inpam.height);
   
for(int row=0;row<inpam.height;row++)
   for(int col=0;col<inpam.width;col++)
   {
      outArray[row][col][0] = 0;
      int k=inArray[row][col][0];

      for(int j=0;j<k;j++)
      {      
         outArray[row][col][0] += round((histogram[j]/n)*L);
      }
   }  

//ease of use, overwrite the original array to be handed back.
   pnm_freepamarray(inArray,&inpam);     
   inArray = pnm_allocpamarray(&outpam);
   for(int r=0;r<inpam.height;r++)
      for(int c=0;c<inpam.width;c++)
    inArray[r][c][0] = outArray[r][c][0];

   return outpam;

}
/***************************************************************/
//This function will produce the data required to make a histogram
//Index is intensity, value is the frequency
//L is the intensity scale
/****************************************************************/
const int* gatherHistogram(const pam& inpam,tuple **&inArray,const int& L)
{
   int* histogram = new int[L+1];
   for(int r=0;r<L+1;r++)
    histogram[r]=0;

       for(int r=0;r<inpam.height;r++)
         for(int c=0;c<inpam.width;c++)
            histogram[inArray[r][c][0]]++;

return histogram;
} 
