/*Program will be similar to Assignment 2's hist_eq with the difference being that this program will
function on the Intensity value from the HSI of a PPM filetype, images are now 24 bit ints
*/

//intensity = R+G+B/3


#include <pam.h>
#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <cmath>

using namespace std;

tuple **read_image(char *filename, pam &inpam);
void write_image(char *filename,pam &inpam, tuple **array);
const pam histogramEqual(const pam& inpam,tuple **&inArray);
const int* gatherHistogram(const pam& inpam,tuple **&inArray,const int &L);
void HSItoRGB(const pam& inpam,tuple &outArray,const double& H, const double& S,const double& I);
double getHue(const tuple& inArray);
double getSaturation(const tuple& inArray);
double getIntensity(const tuple& inArray);



const double PI = 3.14159265;


//argc == argument count, auto sets value based on arguments given.
//argv[] == argument vector
//for passing in arguments from the command line.
//argv[0] = image_rotate.cc
//argv[1] = input.ppm
//argv[2] = output.ppm
//argv[3] = angle
int main(int argc,char *argv[])
{
   //the input image
   pam inpam;

   //the Array holding the information of the image 
   tuple **array;

   pm_init(argv[0],0);
   array = read_image(argv[1],inpam);
   pam outpam = histogramEqual(inpam, array);	
   write_image(argv[2],outpam,array);

   return 0;
};


/**************************************************************/
//input: given a filename of the image, passed from argv in main.
/**************************************************************/
tuple **read_image(char *filename, pam &inpam)
{
   FILE *f;
   tuple **A;

   if ((f = pm_openr(filename)) == NULL) {
      cerr << "Cannot open file \"" << filename << "\" for reading." << endl;
      exit(1);
   }

   if ((A = pnm_readpam(f, &inpam, PAM_STRUCT_SIZE(tuple_type))) == NULL) {
      cerr << "Cannot read image \"" << filename << "\"." << endl;
      exit(1);
   }

   pm_close(f);
   return A;
};

/**************************************************************/
// writes the image to the given file 
/**************************************************************/
void write_image(char *filename,pam &inpam, tuple **array)
{
   FILE *f;

   if ((f = pm_openw(filename)) == NULL) {
      cerr << "Cannot open file \"" << filename << "\" for writing." << endl;
      exit(1);
   }

   // NOTE: if you change other attributes such as height and width, you
   //  should change it here too. 
   inpam.file = f;

			
   pnm_writepam(&inpam, array);
   pm_close(f);
};

/*************************************************************/
//Equalize the histogram of the the image
//Method is formula: S(k) = summation j=0 -> k; n(j)/n * L
//S(k) is the output at the k-th intensity
//n is the number of pixels
//n(j) is the number of pixels at j-th intensity, will be held by histogram[j]
//L is the intensity range - 1, in this case L=255
//Returns a matrix of integers, organized by frequency and RGB
/*************************************************************/
const pam histogramEqual(const pam& inpam,tuple **&inArray)
{
   const int L = 3*(255); 

   
    //Build a Histogram of intensities
   const int* intenseHistogram = gatherHistogram(inpam,inArray,L);
   

   pam outpam = inpam;
   tuple** outArray = pnm_allocpamarray(&inpam);
   
   const double n = (inpam.width * inpam.height);
   //Put RGB into outArray

double H,S,I;
for(int row=0;row<inpam.height;row++)
   for(int col=0;col<inpam.width;col++)
   {
      for(int HSI=0;HSI<3;HSI++)
      {
         if(HSI == 0)
             H = getHue(inArray[row][col]);        

         else if(HSI == 1)
             S = getSaturation(inArray[row][col]);
         
         else
         {
            int k=getIntensity(inArray[row][col]);
            //Used div n*L on histogram of intensities
            
            I=0; 
            for(int j=0;j<k;j++)      
               I+=(intenseHistogram[j]/n)*L;
    
         }
      }
      if(row == 122 && col == 160)
         cout<<"S: "<<S<<" H: "<<H*(PI/180)<<" I: "<<I<<endl;
          HSItoRGB(inpam,outArray[row][col],H,S,(I/3.0));
   }

//ease of use, overwrite the original array to be handed back.
   pnm_freepamarray(inArray,&inpam);     
   inArray = pnm_allocpamarray(&outpam);
    inArray = outArray;

   return outpam;

}
/***************************************************************/
//This function will produce the data required to make a histogram
//Index is intensity, value is the frequency
//L is the intensity scale
/****************************************************************/
const int* gatherHistogram(const pam& inpam,tuple **&inArray,const int& L)
{
   int* histogram = new int[3*L+1];
   for(int r=0;r<3*L+1;r++)
         histogram[r]=0;

       for(int r=0;r<inpam.height;r++)
         for(int c=0;c<inpam.width;c++)
         {
            int i =(inArray[r][c][0] + inArray[r][c][1] + inArray[r][c][2]);
            histogram[i]++;
         }
return histogram;
} 

/******************************************************************/
//Will convert the current HSI values given, into RGB values for the output
void HSItoRGB(const pam& inpam,tuple &outArray,const double& H, const double& S,const double& I)
{
   if(S==0)
   {
      outArray[0] = outArray[1] = outArray[2] = I;
      return;
   }
   
   double rads = PI/180;
   double R, G, B;
   
//cout<<"H:S:I"<<H<<":"<<S<<":"<<I<<endl;
   if(0<= H && H <120)
   {
      double top=S*cos((H)*rads);
      double bot=cos((60 - H) * rads);
      //Red
      R = I*(1+(top/bot));
      //Blue
      B = I*(1-S);
      //Green
      G = 3*I - (R+B);
   } 

   else if(120 <= H && H < 240)
   {
      double top= S * cos((H-120)*rads);
      double bot=cos((180 - H)*rads);
      //Red
       R = I*(1-S);
      //Green
      G = I*(1+(top/bot));
      //Blue
      B = 3*I - (R+G);
   }
   else
   {
      double top=S*cos((H-240)*rads);
      double bot=cos((300 - H)*rads);
      //Green
      G = I*(1-S);
      //Blue
      B = I*(1+(top/bot));     
      //Red
      R = 3*I -(G+B);
   }

   if (R > 255) R = 255;
   else if (R < 0) R = 0;
   outArray[0] = R;
   
   if (G > 255) G = 255;
   else if (G < 0) G = 0;
   outArray[1] = G;
   
   if (B > 255) B = 255;
   else if (B < 0) B = 0;
   outArray[2] = B;
   
}

/******************************************************************/
//Grabs hue from the current location from inArray
double getHue(const tuple& inArray)
{
   double theta;
   double r=inArray[0],g=inArray[1],b=inArray[2];

   double top = 0.5*(r-g + r-b);
   double bot = sqrt( (r-g)*(r-g) + (r-b)*(g-b) );

   if(!((r==g)&&(g==b)))
      theta = acos(top/bot) *180/PI;
   else
      return 0;
   
   if(theta>360)
      theta -= 360;
   
   if(b <= g)
      return theta;
   else
      return 360 - theta;
}

/******************************************************************/
//Will grab the saturation from the current location in the inarray
double getSaturation(const tuple& inArray)
{
   int r=inArray[0],g=inArray[1],b=inArray[2];
   return 1-(3*(double)min (min(r,g) ,b) / (r+g+b));
}

/******************************************************************/
//Will Grab the intensity from the curent location in the inarray
double getIntensity(const tuple& inArray)
{
   int r=inArray[0], g=inArray[1],b=inArray[2];
   return (r+g+b); 
}
